#!/usr/bin/env bash
set -e
releases=$(mktemp)

maybe_trace() {
  if [ -n "$trace" ]; then
    set -x
  fi
}

list_releases() {
  releases_url="https://api.github.com/repos/$repo/releases"
  if [ -n "$version" ]; then
    releases_url="$releases_url/tags/$version"
  fi
  curl -H "$AUTHORIZATION_HEADER" -q -s -L "$releases_url" -o "$releases"
}

find_artifact() {
  if [ -z "$version" ]; then
    version_selector='.[0]'
  fi
  if [ -z "$os_re" ]; then
    os=$(echo ${os:-$(uname -s)}|tr A-Z a-z)
    case $os in
      darwin)
        os_re='[Dd]arwin|[Mm][Aa][Cc][Oo][Ss]'
        ;;
      linux)
        os_re='[Ll]inux'
        ;;
      windows*|CYGWIN*)
        os_re='[Ww]in(?:dows|)'
        ;;
    esac
  fi
  if [ -z "$arch_re" ]; then
    arch=$(echo ${arch:-$(uname -m)}|tr A-Z a-z)
    case $arch in
      arm64|aarch64)
        arch_re='[Aa]rm64|[Aa]arch64';;
      amd64|x86_64)
        arch_re='[Aa]md64|[Xx]86[-_]64';;
      i686|i386|x86)
        arch_re='(?:i[3-6]|x)86';;
    esac
  fi
  os_re="$os_re" arch_re="$arch_re" version_selector="$version_selector" \
  "$GITHUB_ACTION_PATH/program-filter" "$releases"
}

select_artifact() {
  artifact=$(find_artifact)
  if [ -z "$artifact" ]; then
    if [ -n "$os_re" ]; then
      os_message="OS ('$os_re')"
      maybe_and=1
      matching=1
    fi
    if [ -n "$arch_re" ]; then
      arch_message="ARCH ('$arch_re')"
      if [ -n "$maybe_and" ]; then
        and=' and '
      fi
      matching=1
    fi
    if [ -n "$matching" ]; then
      matching='matching '
    fi
    echo "$0 could not find asset from '$releases_url' (saved as '$releases') ${matching}${os_message}${and}${arch_message}" >&2
    exit 1
  fi
}

set_up_auth() {
  if [ -n "$GH_TOKEN" ]; then
    export AUTHORIZATION_HEADER="Authorization: token $GH_TOKEN"
  else
    export AUTHORIZATION_HEADER='X-No-Authorization: Sorry About That'
  fi
}

get_content_length() {
  perl -e '
    my $headers_file=shift;
    my $length;
    {
      open(my $headers, q(<), $headers_file);
      local $/="\r\n";
      while (<$headers>) {
        chomp;
        next unless m/^content-length:\s+(\d+)$/i;
        $length=$1;
      }
      close $headers;
    }
    print $length;
  ' "$1"
}

validate_file_length() {
  perl -e '
    my $artifact=$ENV{artifact};
    my $temp_file="$ENV{temp_file}";
    my $length=$ENV{content_length};
    my $size=-s $temp_file;
    die "downloaded artifact ($artifact) length ($size) is not expected length ($length)" unless ($size) == $length;
    print "\n";
  '
}

shasum() {
  perl -e '
  use Digest::SHA qw($errmsg);
  my $mode = "b";
  my $alg = 256;
  my $file = shift;
  my $digest = eval { Digest::SHA->new($alg)->addfile($file, $mode) };
  if ($@) { warn "shasum: $file: $errmsg\n"; exit; }
  print $digest->hexdigest;
  ' "$1"
}

download_artifact() {
  temp_file=$(mktemp)
  headers_file=$(mktemp)
  curl -D "$headers_file" -H "$AUTHORIZATION_HEADER" -o "$temp_file" -q -s -L "$artifact"
  content_length=$(get_content_length "$headers_file")
  request_id=$(grep -i ^x-github-request-id: "$headers_file" | tail -1)
  echo "Downloaded $artifact - content-length: $content_length; shasum256: $(shasum "$temp_file"); $request_id"
  content_length="$content_length" artifact="$artifact" temp_file="$temp_file" validate_file_length

  echo "url=$artifact" >> "$GITHUB_OUTPUT"
}

select_file() {
  (
    if [ -n "$file_re" ]; then
      grep -E "$file_re"
    else
      cat -
    fi
  ) | tail -1
}

strip_zip_file_size_date_and_time_from_directory_listing() {
  perl -pe 's/^\s*\d+\s+\d+-\d+-\d+\s+\d+:\d+\s+//'
}

get_destination() {
  destination="${destination:-$GITHUB_WORKSPACE}"
  (
    cd "$GITHUB_WORKSPACE"
    mkdir -p "$(dirname "$destination")"
  )
  echo "path=$destination" >> "$GITHUB_OUTPUT"
}

move_and_cleanup_selected_file() {
  get_destination
  if [ -n "$selected_file" ] && [ -e "$selected_file" ]; then
    selected_file="$(pwd)/$selected_file"
    cd "$GITHUB_WORKSPACE"
    mv "$selected_file" "$destination" &&
    rm "$temp_file"
  else
    mkdir -p "$destination"
    find . -mindepth 1 -maxdepth 1 -print0 |
      xargs -0 mv -t "$destination"
  fi
}

maybe_work_in_scratch_area() {
  if [ -n "$selected_file" ]; then
    cd $(mktemp -d)
  fi
}

maybe_extract_artifact() {
  case "$artifact" in
  *.tar.gz|*.tgz)
    selected_file=$(
      tar tzf "$temp_file" |
      select_file
    )
    maybe_work_in_scratch_area
    tar zxf "$temp_file" "$selected_file"
    move_and_cleanup_selected_file
    ;;
  *.zip)
    selected_file=$(
      unzip -l "$temp_file" |
      select_file |
      strip_zip_file_size_date_and_time_from_directory_listing
    )
    maybe_work_in_scratch_area
    unzip "$temp_file" "$selected_file"
    move_and_cleanup_selected_file
    ;;
  *)
    : binary
    get_destination
    mv "$temp_file" "$destination"
  esac
  if [ -n "$destination" ] && [ -f "$destination" ]; then
    chmod +x "$destination"
    if [ -n "$add_to_path" ]; then
      realpath $(dirname "$destination") >> "$GITHUB_PATH"
    fi
  fi
}

maybe_trace
set_up_auth
list_releases
select_artifact
download_artifact
maybe_extract_artifact
